from datetime import datetime

from telebot import TeleBot, types

from config import *
from info import media_pos
from utils import get_buttons_excel, get_users_excel
import keyboards as kb

import os.path

from database_conn import user_exist, create_user, update_pressed_buttons, update_main_menu_buttons, get_users_ids

bot = TeleBot(API_TOKEN)


@bot.message_handler(commands=['start'])
def welcome_message(message):
    if not user_exist(message.from_user.id):
        create_user(message.from_user.id, message.from_user.first_name, message.from_user.last_name,
                    message.from_user.username)

    bot.send_message(message.from_user.id, '''–ü—Ä–∏–≤–µ—Ç üëã\n\n–Ø —á–∞—Ç - –±–æ—Ç –ü—Ä–æ—Ñ—Å–æ—é–∑–Ω–æ–π –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –°—Ç—É–¥–µ–Ω—Ç–æ–≤ –ù–ù–ì–£''',
                     reply_markup=kb.welcome_m_up)


@bot.message_handler(commands=['admin'])
def admin_menu(message: types.Message):
    sender_id = message.from_user.id

    if sender_id in [842533153, 288708117]:
        bot.send_message(chat_id=sender_id, text='–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å',
                         reply_markup=kb.admin_main_markup)
    else:
        bot.send_message(sender_id, 'Access denied')


@bot.message_handler(content_types=['text'])
def main_menu(message):
    if type(message) is types.Message:
        if message.text in ['–û–±—â–µ–∂–∏—Ç–∏—è üè°', '–°—Ç–∏–ø–µ–Ω–¥–∏–∏ üí∞', '–ü—Ä–æ–µ–∫—Ç—ã üî•', '–ó–∞—Ä—è üå≥', '–†–ñ–î - –±–æ–Ω—É—Å üéÅ', '–û –ø—Ä–æ—Ñ—Å–æ—é–∑–µ üè†',
                            '–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òé']:
            bot.send_message(message.from_user.id, text=dict_mm[message.text][0],
                             reply_markup=dict_mm[message.text][1], parse_mode='Markdown')
            update_main_menu_buttons(message)

        elif message.text == '–ú–µ–¥–∏–∞ –ü–û–° üîó':
            bot.send_message(message.from_user.id, text=media_pos, disable_web_page_preview=True, parse_mode='Markdown')
            update_main_menu_buttons(message)

        else:
            response_message = '''–Ø –≤—Å–µ–≥–æ –ª–∏—à—å –±–æ—Ç –∏ –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è.\n\n–ï—Å–ª–∏ —Ç—ã –ø–æ—Ç–µ—Ä—è–ª—Å—è, —Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá
–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start'''
            bot.send_message(message.from_user.id, response_message,
                             reply_markup=kb.back_to_mm_markup)

    if type(message) is types.CallbackQuery:
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.main_menu_m_up)
        update_main_menu_buttons(message)

    if not user_exist(message.from_user.id):
        create_user(message.from_user.id, message.from_user.first_name, message.from_user.last_name,
                    message.from_user.username)


# Start callback
@bot.callback_query_handler(func=lambda c: c.data == 'welcome_message' or c.data == 'return_to_mm')
def process_callback_welcome(callback_query: types.CallbackQuery):
    bot.answer_callback_query(callback_query.id)
    main_menu(callback_query)


# Dorm callback handler
@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith('dorm_'))
def dorm_inline(call: types.CallbackQuery):
    category = call.data.split('_')[1]
    chat_id, message_id = call.message.chat.id, call.message.message_id
    bot.answer_callback_query(call.id)

    if category == 'summer-docs':
        bot.send_document(chat_id, open('docs/–ó–∞—è–≤–ª–µ–Ω–∏–µ –°—Ç–∞—Ä—à–µ–∫—É—Ä—Å–Ω–∏–∫–∏ –õ–µ—Ç–æ.doc', 'rb'))
    elif category == 'enrolle-docs-take':
        bot.send_document(chat_id, open('docs/–ó–∞—è–≤–ª–µ–Ω–∏–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç—ã.doc', 'rb'))
        bot.send_document(chat_id, open('docs/–õ—å–≥–æ—Ç–Ω—ã–µ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏.pdf', 'rb'))
    else:
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=dict_dorm[category][0],
                              reply_markup=dict_dorm[category][1], parse_mode='Markdown')

    update_pressed_buttons(call)


# Scholarship callback handler
@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith('scholarship_'))
def scholarship_inline(call: types.CallbackQuery):
    category = call.data.split('_')[1]
    chat_id, message_id = call.message.chat.id, call.message.message_id
    bot.answer_callback_query(call.id)

    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=dict_scholarship[category][0],
                          reply_markup=dict_scholarship[category][1], parse_mode='Markdown',
                          disable_web_page_preview=True)

    update_pressed_buttons(call)


# PZD-bonus callback handler
@bot.callback_query_handler(lambda c: c.data and c.data.startswith('rzd_'))
def rzd_inline(call: types.CallbackQuery):
    category = call.data.split('_')[1]
    chat_id, message_id = call.message.chat.id, call.message.message_id
    bot.answer_callback_query(call.id)

    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=dict_rzd[category][0],
                          reply_markup=dict_rzd[category][1])

    update_pressed_buttons(call)


# Projects callback handler
@bot.callback_query_handler(lambda c: c.data and c.data.startswith('proj_'))
def projects_handler(call: types.CallbackQuery):
    category = call.data.split('_')[1]
    chat_id, message_id = call.message.chat.id, call.message.message_id
    bot.answer_callback_query(call.id)

    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=dict_projects[category][0],
                          reply_markup=dict_projects[category][1])

    update_pressed_buttons(call)


# SSOL callback handler
@bot.callback_query_handler(lambda c: c.data and c.data.startswith('ssol_'))
def ssol_handler(call: types.CallbackQuery):
    category = call.data.split('_')[1]
    chat_id, message_id = call.message.chat.id, call.message.message_id
    bot.answer_callback_query(call.id)

    if category == 'process-docs-take':
        bot.send_document(chat_id, open('docs/–ó–∞—è–≤–ª–µ–Ω–∏–µ –≤ –°–°–û–õ –ó–∞—Ä—è.docx', 'rb'))
    else:
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=dict_ssol[category][0],
                              reply_markup=dict_ssol[category][1])

    update_pressed_buttons(call)


# Contacts callback handler
@bot.callback_query_handler(lambda c: c.data and c.data.startswith('contacts_'))
def contacts_handler(call: types.CallbackQuery):
    category = call.data.split('_')[1]
    chat_id, message_id = call.message.chat.id, call.message.message_id
    bot.answer_callback_query(call.id)

    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=dict_contacts[category][0],
                          reply_markup=dict_contacts[category][1], parse_mode='Markdown')

    update_pressed_buttons(call)


# Return callback
@bot.callback_query_handler(lambda c: c.data and c.data.startswith('return_'))
def return_callback(call: types.CallbackQuery):
    category = call.data.split('_')[1]
    chat_id, message_id = call.message.chat.id, call.message.message_id
    bot.answer_callback_query(call.id)

    if category == 'contacts' or category == 'dorm-enrolle':
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=dict_returns[category][0],
                              reply_markup=dict_returns[category][1], parse_mode='Markdown')
    else:
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=dict_returns[category][0],
                              reply_markup=dict_returns[category][1])


# Admin handler
@bot.callback_query_handler(lambda c: c.data and c.data.startswith('admin_'))
def report_callback(call: types.CallbackQuery):
    category = call.data.split('_')[1]
    chat_id, message_id = call.message.chat.id, call.message.message_id
    bot.answer_callback_query(call.id)
    sender_id = call.from_user.id

    if sender_id in [842533153, 288708117]:

        if category == 'send-all':
            bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                  text=info.admin_send,
                                  reply_markup=kb.admin_send_all_markup,
                                  parse_mode='Markdown')

        if category == 'send-all-send':
            msg = bot.send_message(chat_id=chat_id,
                                   text='''–ù–∞–ø–∏—à–∏ –¥–∞ –∏–ª–∏ yes –µ—Å–ª–∏ —Ç—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–ø–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ, –∫—Ä–æ–º–µ –¥–∞/yes''')

            bot.register_next_step_handler(msg, confirm_send_message)

        if category == 'send-all-edit':

            if os.path.exists('upload_image.jpg'):
                path = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'upload_image.jpg')
                os.remove(path)

            msg = bot.send_message(chat_id=chat_id, text='--- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---\n\n–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç:')

            bot.register_next_step_handler(msg, create_text_for_send_message)

        if category == 'send-all-view':

            if os.path.exists('text_for_send_message.md'):

                with open('text_for_send_message.md', 'r') as f:
                    text = f.read()

                if text is None:
                    bot.send_message(sender_id, '–§–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –ø—É—Å—Ç–æ–π, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –µ–≥–æ –≤ –∫–Ω–æ–ø–∫–µ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"')
                else:
                    bot.send_message(sender_id, text, parse_mode='Markdown')

            if os.path.exists('upload_image.jpg'):
                bot.send_photo(sender_id, open('upload_image.jpg', 'rb'))

        if category == 'report':
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–µ–±–µ –æ—Ç—á–µ—Ç',
                                  reply_markup=kb.admin_report_markup)

        if category == 'report-users':
            get_users_excel()

            bot.send_document(chat_id=chat_id, document=open('./report_users.xlsx', 'rb'))

        if category == 'report-buttons':
            get_buttons_excel()

            bot.send_document(chat_id=chat_id, document=open('./report_buttons.xlsx', 'rb'))

    else:
        bot.send_message(sender_id, text='Access denied')


def confirm_get_photo_from_admin(message: types.Message):
    sender_id = message.from_user.id

    if sender_id in [842533153, 288708117]:

        if message.text.lower() in ['–¥–∞', 'yes']:

            msg = bot.send_message(sender_id, '–°–∫–∏–Ω—å —Å—é–¥–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω—É–∂–Ω–∞')
            bot.register_next_step_handler(msg, get_photo_from_admin)

        else:
            bot.send_message(sender_id, '–•–æ—Ä–æ—à–æ, –æ–±–æ–π–¥–µ–º—Å—è –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏')

    else:
        bot.send_message(sender_id, 'Access denied')


def get_photo_from_admin(message: types.Message):
    sender_id = message.from_user.id

    if sender_id in [842533153, 288708117]:

        try:

            file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            src = os.path.dirname(__file__) + r'\upload_image.' + file_info.file_path.split('.')[1]

            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)
                bot.send_message(sender_id, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')

        except Exception as e:
            bot.send_message(sender_id, f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ - –æ—à–∏–±–∫–∞: {e}')

    else:

        bot.send_message(sender_id, 'Access denied')


def confirm_send_message(message: types.Message):
    sender_id = message.from_user.id

    if sender_id in [842533153, 288708117]:

        if message.text.lower() in ['yes', '–¥–∞']:
            users_ids = get_users_ids()

            if os.path.exists('text_for_send_message.md'):

                with open('text_for_send_message.md', 'r') as text_file:
                    text = text_file.read()

                for id in users_ids:

                    try:

                        bot.send_message(sender_id, text=text, parse_mode='Markdown')

                        if os.path.exists('upload_image.jpg'):
                            bot.send_photo(sender_id, open('upload_image.jpg', 'rb'))

                    except Exception as e:

                        bot.send_message(sender_id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id: {id}')

            else:
                bot.send_message(sender_id, '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª –≤ –∫–Ω–æ–ø–∫–µ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"')

            bot.send_message(sender_id, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.')
        else:
            bot.send_message(sender_id, '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–í–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞')
            bot.send_message(sender_id, '–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å',
                             reply_markup=kb.admin_main_markup)
    else:
        bot.send_message(sender_id, text='Access denied')


def create_text_for_send_message(message: types.Message):
    sender_id = message.from_user.id
    if sender_id in [842533153, 288708117]:
        try:

            with open('text_for_send_message.md', 'w') as text_file:

                text_file.write(message.text)

        except Exception as e:
            bot.send_message(message.from_user.id,
                             f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - {e}\n\n–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –≤–≤–µ–ª —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä —Å—Ç–∏–∫–µ—Ä—ã')

        msg = bot.send_message(sender_id,
                               '–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n–ù—É–∂–Ω–∞ –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è? –í–≤–µ–¥–∏ –î–∞ –∏–ª–∏ yes, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–≤–µ–¥–∏ –Ω–µ—Ç')
        bot.register_next_step_handler(msg, confirm_get_photo_from_admin)

    else:
        bot.send_message(sender_id, text='Access denied')


while True:
    try:
        bot.polling(none_stop=True, interval=0, skip_pending=True)
    except Exception as e:
        if not os.path.exists('errors.txt'):
            with open('errors.txt', 'w') as file:
                file.write(f'{str(datetime.now())[:-7]} | Exception is: {str(e)}\n\n')
        else:
            with open('errors.txt', 'a+') as file:
                file.write(f'{str(datetime.now())[:-7]} | Exception is: {str(e)}\n\n')
